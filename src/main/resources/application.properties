# The path of the banner (path relative to root of classpath) which could be provided by user
quarkus.banner.path=quarkus-banner.txt

# Logging configuration
quarkus.log.category."it.dontesta.eventbus.ws.filter.TraceJaxRsRequestResponseFilter".level=DEBUG
quarkus.log.category."it.dontesta.eventbus.consumers.http".level=DEBUG
quarkus.log.category."it.dontesta.eventbus.consumers.events.handlers.Dispatcher".level=DEBUG
quarkus.log.category."it.dontesta.eventbus.consumers.events.handlers".level=DEBUG

##
## This section configure the options for native image
##

# Additional resources to include in the native image
quarkus.native.resources.includes=app-keystore.jks

##
## This section configure the HTTP layer of the application
##

# Enable or disable the HTTP request/response compression. Default is false.
# For more details, see https://quarkus.io/guides/rest#http-compression
quarkus.http.enable-compression=true

# The media types that should be compressed. Default is empty.
# For more details, see https://quarkus.io/guides/rest#http-compression
quarkus.http.compress-media-types=application/json,application/xml,text/html,text/plain

# Setting the key store file
quarkus.http.ssl.certificate.key-store-file=app-keystore.jks

# Setting the key store password
quarkus.http.ssl.certificate.key-store-password=secret

# Setting the key store type
quarkus.http.ssl.certificate.key-store-file-type=JKS

##
## This section configure the thread pool
##

# The maximum number of threads in the thread pool. Default is 200.
quarkus.thread-pool.max-threads=250

# The minimum number of threads in the thread pool. Default is 8.
quarkus.thread-pool.core-threads=20

##
## This section configure the OpenShift extension
## For more info see https://quarkus.io/guides/deploying-to-openshift
##

# If true, the service will be exposed outside of the cluster
# and will be assigned a route.
# If false, the service will only be accessible within the cluster (default)
quarkus.openshift.route.expose=true

# The target named port. If not provided, it will be deducted
# from the Service resource ports. Options are: "http" and "https".
quarkus.openshift.route.target-port=https

## Route TLS configuration:
# The termination type of the route. Options are: "edge",
# "reencrypt", and "passthrough".
quarkus.openshift.route.tls.termination=passthrough

# The desired behavior for insecure connections to a route.
quarkus.openshift.route.tls.insecure-edge-termination-policy=None

# The name of the ConfigMap that contains the AMQP host, port
quarkus.openshift.env.configmaps=amqp-hostname-port

# The name of the Secret that contains the AMQP username and password
# ,MongoDB connection URL (that will be contained the username and password)
# and the database URL (that will be contained the username and password)
quarkus.openshift.env.secrets=amqp-username-password,mongodb,db-username-password,db-url

# The base image to be used when a container image is being produced for the jar build.
# The value of this property is used to create an ImageStream for the builder image used in
# the Openshift build. When it references images already available in the internal Openshift
# registry, the corresponding streams are used instead. When the application is built against
# Java 21 or higher.
quarkus.openshift.base-jvm-image=registry.access.redhat.com/ubi9/openjdk-21:1.18-3

# Define the JAVA_OPTS environment variables that should be added to the container
# For this JVM application use the GC1 garbage collector with the following options:
# -XX:+UseG1GC this option enables the G1 garbage collector
# -XX:+UnlockExperimentalVMOptions this option unlocks experimental VM options
# -XX:MaxGCPauseMillis this option sets the maximum pause time goal
# -XX:InitiatingHeapOccupancyPercent this option sets the percentage of the heap occupancy
# -XX:G1ReservePercent this option sets the percentage of reserve memory
# -XX:ConcGCThreads this option sets the number of parallel marking threads
# -XX:G1NewSizePercent this option sets the percentage of the heap size to use as the maximum young generation size
# -XX:G1MaxNewSizePercent this option sets the maximum size of the young generation
# -XX:ParallelGCThreads this option sets the number of parallel garbage collection threads
# -XX:+ExitOnOutOfMemoryError this option exits the VM when an out-of-memory error is thrown
# To enable JMX monitoring, use the following options:
# -Dcom.sun.management.jmxremote this option enables JMX
# -Dcom.sun.management.jmxremote.port=9091 this option sets the JMX port
# -Dcom.sun.management.jmxremote.rmi.port=9091 this option sets the JMX RMI port
# -Djava.rmi.server.hostname=127.0.0.1 this option sets the JMX hostname
# -Dcom.sun.management.jmxremote.authenticate=false this option disables JMX authentication
# -Dcom.sun.management.jmxremote.ssl=false this option disables JMX SSL
# -Dcom.sun.management.jmxremote.local.only=true this option allows remote JMX connections
quarkus.openshift.env.vars.java-opts=-Xms100M -Xmx500M -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:MaxGCPauseMillis=200 -XX:InitiatingHeapOccupancyPercent=45 -XX:G1ReservePercent=10 -XX:ConcGCThreads=4 -XX:G1NewSizePercent=5 -XX:G1MaxNewSizePercent=60 -XX:ParallelGCThreads=4 -XX:+ExitOnOutOfMemoryError -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.rmi.port=9091 -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=true

# Define the ports that should be exposed by the container
# for the JMX monitoring
quarkus.openshift.ports."jmx".protocol=TCP
quarkus.openshift.ports."jmx".container-port=9091

# Define the number of replicas for the deployment
quarkus.openshift.replicas=2

##
## This section configure the Datasource extension
##
quarkus.datasource.db-kind=h2
quarkus.datasource.metrics.enabled=true

##
## This section configure the Hibernate ORM extension
##
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=load_data.sql

##
## This section configure the Jacoco extension
##
quarkus.jacoco.excludes=**/EventBusApplication.class

##
## Application configuration properties
##

# Enable or disable the JX-RS filter. Default is true.
app.filter.enabled=true

# The URIs that the filter should be applied to.
app.filter.uris[0]=/api/rest

# Define the Event Bus virtual address for the HTTP request event
app.eventbus.consumer.http.request.address=http-request

# Define the Event Bus virtual address for the HTTP response event
app.eventbus.consumer.http.response.address=http-response

# Define the Event Bus virtual address for event handler SQL, NoSQL and Queue
app.eventbus.consumer.event.handler.addresses[0]=address=sql-trace,enabled=false
app.eventbus.consumer.event.handler.addresses[1]=address=nosql-trace,enabled=true
app.eventbus.consumer.event.handler.addresses[2]=address=queue-trace,enabled=true

# Define the Event Bus virtual address for the Dispatcher
app.eventbus.consumer.dispatcher.address=dispatcher-event

# Define the database name for the NoSQL trace event
app.eventbus.consumer.event.handler.nosql.mongodb.database.name=audit

# Define the collection name for the NoSQL trace event
app.eventbus.consumer.event.handler.nosql.mongodb.database.collection=jax-rs-requests

# Configure the outgoing/incoming AMQP connector and address
# The outgoing connector is used to send the HTTP request and response events to the AMQP broker
# The incoming connector is used to receive the HTTP request and response events from the AMQP broker
mp.messaging.outgoing.http-request-out.connector=smallrye-amqp
mp.messaging.outgoing.http-response-out.connector=smallrye-amqp
mp.messaging.outgoing.http-request-out.address=http-request
mp.messaging.outgoing.http-response-out.address=http-response

# Remove the comment to enable the incoming connector and address
# when the application is used as a consumer of the HTTP request and response events
# See the AmqpConsumer class for more details.
#mp.messaging.incoming.http-request-in.connector=smallrye-amqp
#mp.messaging.incoming.http-response-in.connector=smallrye-amqp
#mp.messaging.incoming.http-request-in.address=http-request
#mp.messaging.incoming.http-response-in.address=http-response

##
## This section is dedicated to the profile production
##

# AMQP configuration for production profile
# The AMQP host, port, username, and password
# are provided by the ConfigMap and Secret.
# See the src/kubernetes/common.yaml file for more details.
%prod.amqp-host=${AMQP_HOSTNAME}
%prod.amqp-port=${AMQP_PORT}
%prod.amqp-username=${AMQP_USERNAME}
%prod.amqp-password=${AMQP_PASSWORD}

# Configure the mongoDB client for a single instance on localhost
# are provided by the Secret.
# See the src/kubernetes/common.yaml file for more details.
%prod.quarkus.mongodb.connection-string=${MONGODB_CONNECTION_URL}

# Configure the datasource for the production profile
%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=${DB_USERNAME}
%prod.quarkus.datasource.password=${DB_PASSWORD}
%prod.quarkus.datasource.jdbc.url=${DB_URL}
%prod.quarkus.datasource.jdbc.max-size=20

# Configure the Hibernate ORM for the production profile
# For more information see Hibernate ORM in development mode
# https://quarkus.io/guides/hibernate-orm#dev-mode and Hibernate ORM in production mode
# https://quarkus.io/guides/hibernate-orm#hibernate-orm-in-production-mode

# This approach is best when you are working on a copy of the production data but
# want to fully control the schema evolution. Or if you use a database schema
# migration tool like Flyway or Liquibase.
# %prod.quarkus.hibernate-orm.database.generation=none

# Set to no-file for all profiles except the dev and test ones.
# %prod.quarkus.hibernate-orm.sql-load-script=no-file

%prod.quarkus.hibernate-orm.log.sql=false

# Logging configuration for the production profile
%prod.quarkus.log.category."it.dontesta.eventbus.ws.filter.TraceJaxRsRequestResponseFilter".level=INFO
%prod.quarkus.log.category."it.dontesta.eventbus.consumers.http".level=INFO
%prod.quarkus.log.category."it.dontesta.eventbus.consumers.events.handlers.Dispatcher".level=INFO
%prod.quarkus.log.category."it.dontesta.eventbus.consumers.events.handlers".level=INFO