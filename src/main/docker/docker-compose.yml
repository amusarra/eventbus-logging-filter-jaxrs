# This is a sample Docker Compose file that can be used to start the
# services required by the Event Bus Logging Filter JAX-RS application.
version: '3.8'

# Define the networks
networks:
  logging_filter_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Define the services
# 1. MongoDB
# 2. Artemis
# 3. Postgres
# 4. Logging Filter
services:
  mongodb:
    image: docker.io/library/mongo:4.4.3-bionic
    container_name: mongodb
    networks:
        - logging_filter_network
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  artemis:
    image: apache/activemq-artemis:2.33.0
    container_name: artemis
    networks:
        - logging_filter_network
    environment:
        - AMQ_USER=artemis
        - AMQ_PASSWORD=artemis
    ports:
      - "8161:8161"
      - "61616:61616"
      - "5445:5445"
      - "5672:5672"

  # See https://hub.docker.com/_/postgres for more details about the
  # environment variables used to configure the PostgreSQL database.
  postgres:
    image: registry.redhat.io/rhel8/postgresql-16:1-16.1716485357
    container_name: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    networks:
      - logging_filter_network
    environment:
      - POSTGRESQL_USER=quarkus
      - POSTGRESQL_PASSWORD=quarkus
      - POSTGRESQL_DATABASE=quarkus_event_bus
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql@14/data:rw
  adminer:
    image: adminer
    restart: always
    ports:
      - "8090:8080"

  # The environment variables are used to configure the connection to the
  # Artemis message broker and the MongoDB database.
  # Se the application.properties file for more details about the names of the
  # environment variables.
  logging-filter:
    # Use the following image if you want to use the pre-built image from Docker Hub:
    # docker.io/amusarra/eventbus-logging-filter-jaxrs:latest
    image: docker.io/amusarra/eventbus-logging-filter-jaxrs:latest
    container_name: logging-filter
    networks:
      - logging_filter_network
    environment:
      - AMQP_HOSTNAME=artemis
      - AMQP_PORT=5672
      - AMQP_USERNAME=artemis
      - AMQP_PASSWORD=artemis
      - MONGODB_CONNECTION_URL=mongodb://mongodb:27017/audit
      - DB_USERNAME=quarkus
      - DB_PASSWORD=quarkus
      - DB_URL=jdbc:postgresql://postgres:5432/quarkus_event_bus
      - JAVA_OPTS=-Xms100M -Xmx500M -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions
        -XX:MaxGCPauseMillis=200 -XX:InitiatingHeapOccupancyPercent=45 -XX:G1ReservePercent=10
        -XX:ConcGCThreads=4 -XX:G1NewSizePercent=5 -XX:G1MaxNewSizePercent=60
        -XX:ParallelGCThreads=4 -XX:+ExitOnOutOfMemoryError -Dcom.sun.management.jmxremote.port=9091
        -Dcom.sun.management.jmxremote.rmi.port=9091 -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false
        -Djava.rmi.server.hostname=127.0.0.1
    ports:
      - "8080:8080"
      - "8443:8443"
      - "9091:9091"
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:8080/q/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - artemis
      - mongodb
      - postgres

# Define the volumes
volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
